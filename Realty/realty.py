#!/usr/bin/env python
# coding: utf-8

# # Исследование объявлений о продаже квартир
# 
# В нашем распоряжении данные сервиса Яндекс.Недвижимость — архив объявлений о продаже квартир в Санкт-Петербурге и соседних населённых пунктов за несколько лет.
# 
# Нужно научиться определять рыночную стоимость объектов недвижимости. **Наша задача — установить параметры.** Это позволит построить автоматизированную систему: она отследит аномалии и мошенническую деятельность. 
# 
# 
# **План работы:**
# 1. Открытие файла, импорт необходимых библиотек, первичное знакомство с данными
#     - загрузим датасет и бегло изучим предоставленные данные
# 2. Предобработка данных
#     - обработка пропусков при необходимости
#     - приведение данных к корректным типам
#     - поиск и обработка дубликатов
#     - определение аномалий
# 3. Добавление необходимых столбцов
# 4. Исследовательский анализ данных
#     - Изучим следующие параметры объектов:
#         * общая площадь
#         * жилая площадь
#         * площадь кухни
#         * цена объекта
#         * количество комнат
#         * высота потолков
#         * этаж квартиры
#         * тип этажа квартиры («первый», «последний», «другой»)
#         * общее количество этажей в доме
#         * расстояние до центра города в метрах
#         * расстояние до ближайшего аэропорта
#         * расстояние до ближайшего парка
#         * день и месяц публикации объявления
#     - Изучим как быстро продавались квартиры
#     - Выявим, какие факторы больше всего влияют на общую (полную) стоимость объекта.Изучим зависимость стоимости от:
#         * общей площади
#         * жилой площади
#         * площади кухни
#         * количества комнат
#         * этажа, на котором расположена квартира (первый, последний, другой)
#         * даты размещения (день недели, месяц, год)
#     - Рассчитаем среднюю цену одного квадратного метра в 10 населённых пунктах с наибольшим числом объявлений
#     - Для Санкт-Петербурга вычислим среднюю цену каждого километра, определем как стоимость объектов зависит от расстояния до центра города.
# 5. Выводы и рекомендации
# 
# **Описание данных:**
# * airports_nearest — расстояние до ближайшего аэропорта в метрах (м)
# * balcony — число балконов
# * ceiling_height — высота потолков (м)
# * cityCenters_nearest — расстояние до центра города (м)
# * days_exposition — сколько дней было размещено объявление (от публикации до снятия)
# * first_day_exposition — дата публикации
# * floor — этаж
# * floors_total — всего этажей в доме
# * is_apartment — апартаменты (булев тип)
# * kitchen_area — площадь кухни в квадратных метрах (м²)
# * last_price — цена на момент снятия с публикации
# * living_area — жилая площадь в квадратных метрах (м²)
# * locality_name — название населённого пункта
# * open_plan — свободная планировка (булев тип)
# * parks_around3000 — число парков в радиусе 3 км
# * parks_nearest — расстояние до ближайшего парка (м)
# * ponds_around3000 — число водоёмов в радиусе 3 км
# * ponds_nearest — расстояние до ближайшего водоёма (м)
# * rooms — число комнат
# * studio — квартира-студия (булев тип)
# * total_area — общая площадь квартиры в квадратных метрах (м²)
# * total_images — число фотографий квартиры в объявлении

# ## Открытие файла, знакомство с данными

# In[1]:


#вызов библиотек
import pandas as pd
import matplotlib.pyplot as plt
plt.style.use('ggplot')
get_ipython().run_line_magic('config', "InlineBackend.figure_format = 'retina'")

try:
    data = pd.read_csv('https://code.s3.yandex.net/datasets/real_estate_data.csv', sep='\t')
except:
    data =pd.read_csv('real_estate_data.csv', sep='\t')
        
display(data.head(10))
data.info()
data.describe()


# Набор данных включает в себя **23699** наблюдений, таблица состоит из 22 столбцов. Имеются пропуски, для некоторых столбцов заметны аномальные значения. 
# 
# Рассмотрим гистограммы для всех числовых столбцов таблицы:

# In[2]:


data.hist(figsize=(15, 20))
plt.show()


# **Описание диаграмм**
# 
# * *total_images* - чаще всего загружают около 10 фото. Есть объявления совсем без фото, редко встречаются объявления с 20 и более фото
# * *last_price* - абсолютное большинство значений расположено в пределе 100 млн., остальные значения практически сливаются с нулем. Очевидно встречаются аномально высокие значения
# * *total_area* - большинство объектов имеют общую площадь до 100 кв.м., встречается относительно небольшое число объектов с площадью 100-200 кв.м, объекты более 200 кв.м. - редкость
# * *rooms* - встречаются нулевые значения, большинство объектов расположено в диапазоне 1-3 комнаты. Есть значения более 10, на гистограмме явно не выражены, очевидно, таких объектов немного
# * *ceiling_height* - абсолютное большинство значений расположено в диапазоне 1-5 метров, необходимо рассмотреть более детально значения ниже допустимой нормы. Также есть выбросы - слишком высокие значения
# * *floors_total* - гистограмма выглядит нормально, нет нулевых значений, но нужно обратить внимание на выбивающиеся большие значения
# * *living_area* - аналогично *total_area*. Отдельно необходимо уделить внимание минимальному значению 2 кв.м., очевидно выброс
# * *floor* - гистограмма выглядит нормально
# * *kitchen_area* - большинство объектов  имеют площадь кухни до 12.5 кв.м, гистограмма выглядит нормально. Встречаются большие значения - 50-100 кв.м., похоже на аномалии. Минимальный размер 1.3 кв.м тоже выглядит сомнительно, похоже на выбросы
# * *balcony* - гистограмма выглядит нормально, больше 3 балконов скорее редкость, но не что-то невозможное
# * *airports_nearest* - данные распределены нормально, за исключением минимального значения 0. Нужно посмотреть отдельно на такие объекты
# * *cityCenters_nearest* - гистограмма выглядит нормально, большинство объектов на гистограмме расположены в радиусе 20 км от центра города
# * *parks_around3000* - у большинства объектов нет парков в радиусе 3км. В целом выглядит нормально
# * *parks_nearest* - у большинства объектов ближайшие парки находятся дальше 3км, также есть пиковое значение - около 800м.
# * *ponds_around3000* - пиковое значение ~ 400, видимо, большинство объектов не находятся в близи водоемов. Гистограмма выглядит нормально
# * *ponds_nearest* - около 1450 объектов находятся в 500 метрах от водоема
# * *days_exposition* - большинство объявлений размещены в пределах 200 дней. Есть объявления, "висящие" более трех лет
# 

# ## Предобработка данных

# ### Переименование столбцов

# Приведем название столбца *'cityCenters_nearest'* к общему для всех виду:

# In[3]:


data.rename(columns={'cityCenters_nearest' : 'city_centers_nearest'}, inplace=True)
print('Названия столбцов:')
data.columns


# ### Работа с пропусками

# Посмотрим на пропуски в каждом столбце:

# In[4]:


data.isna().sum()


# В большей части столбцов встречаются пропуски. Для столбцов '*balcony', 'is_apartment', 'parks_around3000' и 'ponds_around3000'* можем предложить логические замены:

# In[5]:


# balcony - 48% не указало наличие балкона. Предположим, что балкона нет, заменим значения на 0:
data['balcony'] = data['balcony'].fillna(0.0)

# is_apartment - не указано 88% значений. Заменим на False:
data['is_apartment'] = data['is_apartment'].fillna(False)

# Пропуски в столбцах parks_around3000  и ponds_around3000 логичнее заменить на 0,
# вероятно, имеется в виду, что рядом нет парка или водоема:

data['parks_around3000'] = data['parks_around3000'].fillna(0)
data['ponds_around3000'] = data['ponds_around3000'].fillna(0)


# Остальные пропуски рассмотрим более детально:
# 
# - *ceiling_height* - 39% пользователей не указали высоту потолков
# 
# Слишком большое число пропусков. Замена на средние или медианные значения в целом допустимы, но в дальнейшем могут исказить общее представление. Оставим пропуски в этом столбце
# 
# - *floors_total* - 0,3% не указали количество этажей в доме
# 
# Не зная общее число этажей в доме мы не сможем определить тип этажа для объекта - последний он в доме или нет? 
# Для объектов на первом этаже можем заменить пропуски в 'floors_total' на 1:

# In[6]:


# Функция, заменяющие пропуски в 'floors_total', если для объекта указан первый этаж
for f in data['floor'].unique():
    data.loc[(data['floor']==1) & (data['floors_total'].isna()), 'floors_total'] = 1
    
# вывод на экран уникальных значений 'floor' для строк с пропусками в 'floors_total':    
print('Количество строк с пропусками в "floors_total":', len(data.loc[data['floors_total'].isna()]))
print('Пропуски встречаются в объектах на', data.loc[data['floors_total'].isna()]['floor'].sort_values().unique(), 'этажах')


# Осталось 83 пропущенных значения, для которых в дальнейшем мы не сможем определить тип этажа. Удалим эти строки.

# In[7]:


data.dropna(subset=['floors_total'], inplace=True)


# - *living_area* - 8% не указали жилую площадь
# - *kitchen_area* - 9% не указали метраж студии 
# 
# Возможно, большинство таких пропусков характерны для объектов с типом "студия" и/или "свободная планировка"?

# In[8]:


print('Число студий и объектов со свободной планировкой, для которых не указаны данные о жилой площади и/или площади кухни:',      len(data.loc[((data['kitchen_area'].isna()) | (data['living_area'].isna())) & ((data['open_plan']) | (data['studio']))]))


# Да, у таких объектов действительно встречаются пропуски, но их всего 213. Можно заменить пропуски на средние или медианные значения, но возможно искажение дальнейших выводов. Оставим пропуски в  этих столбцах.

# - *locality_name* - 0,02% не указали локацию. Т.к. в этих строках могут быть другие интересующие нас данные, заменим пропуски на 'Unknown'

# In[9]:


data['locality_name'] = data['locality_name'].fillna('Unknown')


# - *days_exposition* - больше 13% пропущенных значений. Объявления не были опубликованы или все еще не сняты с публикации? Оставим эти пропуски.
# 
# Остальные пропуски связаны с картографическими данными:
# - *airports_nearest* - 23%        
# - *city_centers_nearest* - 23%    
# - *parks_nearest* -65%           
# - *ponds_nearest* - 61%  
# 
# Можем предположить, что все эти локации (аэропорт, центр города, парк, пруд) находятся слишком далеко от объектов с пропущенными значениями. Посмотрим максимальные значения в каждом из этих столбцов:
# 

# In[10]:


print('Максимальная отдаленность аэропорта от объекта:', max(data['airports_nearest'])/1000, 'км')
print('Максимальная отдаленность центра города от объекта:', max(data['city_centers_nearest'])/1000, 'км')
print('Максимальная отдаленность парка от объекта:', max(data['parks_nearest'])/1000, 'км')
print('Максимальная отдаленность водоема от объекта:', max(data['ponds_nearest'])/1000, 'км')


# Видимо, для картографических данных есть некие лимиты - если до ближайшего аэропорта (парка, водоема, центра города) *более Х км*, то расстояние для таких объектов *не указывается*. Объекты с пропусками в этих значениях слишком отдалены от интересующих нас локаций и не будут участвовать в анализе зависимости цены от местоположения, оставим пропуски в этих столбцах

# Снова проверим пропуски по всем столбцам:

# In[11]:


data.isna().sum()


# **Общий вывод по пропускам**
# 

# Из документации  известно, что мы имеем два типа данных: одни заполняли сами пользователи, вторые данные - картографические. Логично предположить, что пропуски в первом типе данных возникли из-за того, что *пользователи не заполняли эти данные*. Стоит учесть и возможность *ошибок при выгрузке* - встречаются пропуски в столбце 'locality_name', вряд ли пользователь смог загрузить объявление без указания локации. Остались необработанными пропуски в столбцах 'ceiling_height', 'living_area' и 'kitchen_area' - замена средними или медианными значениями может *исказить выводы* при дальнейшем анализе.
# 
# Картографические пропуски (расстояние до ближайшего аэропорта/парка/водоема, до центра города) *связаны с лимитами* - если расстояние до локации выше определенного значения, то данные не указываются. 

# ### **Изменение типов данных в столбцах**
# 
# - *first_day_exposition* -  нужно изменить на тип datetime64, чтобы Pandas воспринимал эти значения как даты и мы могли проводить с ними операции 
# - *last_price, balcony, floors_total, 'ponds_around3000' 'parks_around3000'*- целочисленные значения, лучше хранить их в этом формате для экономии памяти
# - *'days_exposition'* - тоже столбец с целочисленными значениями, но прежде, чем изменить тип данных в этом столбце нужно все же избавиться от пропусков. Заменим пропуски на условный маркер 9999, при дальнейшей работе с данными из этого столбца 'снимем' этот маркер

# In[12]:


# Изменение типа данных в столбце 'first_day_exposition':
data['first_day_exposition'] = pd.to_datetime(data['first_day_exposition'], format='%Y-%m-%dT%H:%M:%S')

# Изменение типов данных в столбцах 'last_price', 'balcony', 'floors_total':
data['last_price'] = data['last_price'].astype(int)
data['balcony'] = data['balcony'].astype(int)
data['floors_total'] = data['floors_total'].astype(int)
data['ponds_around3000'] = data['floors_total'].astype(int)
data['parks_around3000'] = data['parks_around3000'].astype(int)

# Замена пропусков в 'days_exposition' на 9999 и последующее изменение типа данных:

data['days_exposition'] = data['days_exposition'].fillna(9999)
data['days_exposition'] = data['days_exposition'].astype(int)
# Проверяем изменения
data.info()


# ### **Уникальные значения и дубликаты**

# Проверим единственный столбец с типом 'object' - *locality_name*. Данные в него внесены пользователями, могут встречаться разные варианты написания одних и тех же населенных пунктов. Выведем на экран число уникальных значений и их список:

# In[13]:


print('Всего уникальных названий:', len(data['locality_name'].unique()))
data['locality_name'].sort_values().unique()


# Приведем все данные из столбца к *общему виду*: 
# - сохраним все названия в нижнем регистре
# - все 'ё' заменим на 'е'
# - 'городской поселок' и 'поселок городсокого типа' - одно и то же, оставим везде более привычный вариант 'поселок городского типа'
# - аналогично 'садоводческое некоммерческое товарищество' заменим на 'садовое товарищество'

# In[14]:


# перевод всех значений к нижнему регистру: 
data['locality_name'] = data['locality_name'].str.lower()
# замена 'ё' на 'е':
data['locality_name'] = data['locality_name'].str.replace('ё', 'е')
# замена 'городской поселок' на 'поселок городского типа' и 
#'садоводческое некоммерческое товарищество' на 'садовое товарищество':
data['locality_name'] = data['locality_name'].str.replace('городской поселок','поселок городского типа')
data['locality_name'] = data['locality_name'].str.replace('садоводческое некоммерческое товарищество','садовое товарищество')

print('Всего уникальных названий:', len(data['locality_name'].unique()))
data['locality_name'].sort_values().unique()


# Сократили число уникальных названий до 324. Есть вероятность, что одни и те же населенные пункты могут быть указаны и как 'поселок', и как 'поселок городского типа'. Посмотрим списки с такими типами населенных пунктов:

# In[15]:


# создаем пустые списки, poselki - для поселков,  pgt для поселков городского типа:
poselki = []
pgt = []

# цикл, добавляющий поселки и поселки городского типа в соответствующие списки:
for name in data['locality_name'].unique():
    if 'поселок' in name and 'городского типа' not in name:
        poselki.append(name)
    elif 'городского типа' in name:
        pgt.append(name)
# вывод отсортированных списков на экран:        
poselki.sort()
pgt.sort()
print(poselki)
print('------')
print(pgt)


# В обоих списках встречается "*Рябово*". По данным Яндекс.Карт - это разные населенные пункты в разных районах Ленобласти. Других дубликатов нет.
# 
# Проверим наличие явных дубликатов:

# In[16]:


print('Число строк-дубликатов:', data.duplicated().sum())


# **Вывод по уникальным значениям и дубликатам**
# 
# В данных встречались дубликаты в столбце с названиями локаций. Столбец обработан, все значения приведены к нижнему регистру, 'ё' заменены на 'е', дублирующиеся типы населенных пунктов приведены к одному виду. *Дублирующихся строк нет*.

# ### Редкие и аномальные значения. Выбросы

# Продолжим изучать данные: выявим редкие и аномальные значения. Снова вызовем описание таблицы и рассмотрим каждый столбец отдельно:

# In[17]:


data.describe()


# - **total_images** - есть объявления без фото, есть объявления, где загружено 50 фото. Такое большое число фото скорее аномалия, но в целом допустимо

# - **last_price** - разброс значений от 12.190 до 763.000.000. Это самый важный столбец для анализа. Судя по размаху, в данных встречаются выбросы и аномалии.
# 
# Посмотрим на диаграмму размаха для этого столбца:

# In[18]:


data['last_price'].T.plot(kind='box', vert=False, figsize=(10,5)) 
plt.xlim(0,30000000)
plt.title('Стоимость: размах данных')
plt.xlabel('100 млн.руб')
plt.ylabel('')
plt.show()


# Имеем большое число значений, *лежащих за границами "ящика с усами"* - данных настолько много, что точки сливаются в единую жирную линию. На самом деле, это неудивительно, мы действительно имеем в наборе данных много объектов с высокой стоимостью.
# 
# Из диаграммы видно, что объекты дороже 100 млн.руб встречаются реже, *удалим серхдорогие объекты* и посмотрим на обновленную диаграмму размаха:

# In[19]:


data.drop(index=data.query('last_price > 100_000_000').index,inplace=True)
data['last_price'].T.plot(kind='box', vert=False, figsize=(10,5)) 
plt.title('Стоимость: размах данных без аномально дорогих объектов')
plt.xlabel('100 млн.руб')
plt.ylabel('')
plt.show()


# В обновленном наборе данных по-прежнему много значений за пределами третьего квартиля, видим, что начиная со стоимости ~75 млн.руб точки становятся различимыми, соответсвенно, таких значений намного меньше относительно остальных. *Слишком дорогие объекты в дальнейшем будут 'перетягивать' на себя средние значения и могу исказить проценты корреляции.* Как много таких значений в наборе данных?

# In[20]:


print('Объектов дороже 75 млн.руб.:', len(data.query('last_price > 75_000_000')))


# Удалим эти 30 объектов, чтобы при дальнейшем анализе не допустить некорректных выводов

# In[21]:


data.drop(index=data.query('last_price > 75_000_000').index,inplace=True)
print('Максимальная стоимость объекта:', data['last_price'].max(), 'руб')


# Вспомним про *минимальное значение в столбце - 12 190*. На диаграмме размаха мы не видим этой точки. т.к. она входит в 'левый ус', т.е. считается нормальной, однако логически понимаем, что такая стоимость - аномалия. Много ли у нас таких объектов? Увидеть их мы сможем построим *гистограмму* для объектов стоимостью до значения Q1:

# In[22]:


data.plot(
    kind='hist',
    y='last_price',
    range=(0, 3.400000e+06),
    ylim=(0,500),
    grid=True,
    figsize=(10,5),
    legend=False)
plt.xlabel('млн.руб')
plt.ylabel('Количество объектов')
plt.title('Объекты, дешевле 3.6 млн.руб')

plt.show()


# In[23]:


print('Минимальная стоимость объекта: Топ-10')
data['last_price'].sort_values().head(10)


# Встречается только один объект стоимостью < 430.000, ограничим данные этим минимальным значением.

# In[24]:


data.drop(index=data.query('last_price < 400_000').index,inplace=True)
print('Минимальная стоимость объекта:', data['last_price'].min(), 'руб')


# - **total_area** - минимальное значение столбца 12 кв.м., что допустимо, но максимальное значение 631 кв.м. выглядит странно. Посмотрим на гистограмму:

# In[25]:


data.hist('total_area', bins=100, figsize=(10,5))
plt.xlabel('кв.м')
plt.ylabel('Количество объектов')
plt.title('Общая площадь')
plt.show()


# Квартиры площадью *более 200 кв.м*. встречаются заметно *реже*, значения практически сливаются с нулем, посмотрим на них прицельно:

# In[26]:


data.query('total_area > 200').hist('total_area', bins=100, figsize=(10,5))   
plt.xlabel('кв.м')
plt.ylabel('Количество объектов')
plt.title('Объекты с общей площадью более 200 кв.м')
plt.show()
print('Число объектов с общей площадью более 200 кв.м:', len(data.query('total_area > 200')))
print('Максимальная общая площадь:', data['total_area'].max(), 'кв.м')


# Объекты с площадью более 300 кв.м встречаются еще реже, ограничимся *максимальным значением в 300 кв.м* и удалим превышающие это значение объекты:

# In[27]:


data.drop(index=data.query('total_area > 300').index,inplace=True)
print('Максимальная общая площадь:', data['total_area'].max(), 'кв.м')


# - **rooms** - имеет нулевые значения. Предположим, отсутствие комнат характерно для студий или объектов со свободной планировкой. Также подозрительно выглядит максимальное значение - 19 комнат. Проверим, какая общая площадь и стоимость у объектов c десятью комнатами и более:

# In[28]:


print('Всего объектов без комнат:', len(data.query('rooms == 0')))
print('Студии или объекты со свободной планировкой без комнат:', len(data.query('rooms == 0 and (studio or open_plan)')))
print()
print('Максимальное число комнат:', data['rooms'].max())
print('Медианная площадь объектов с числом комнат 10 и более:', data.query('rooms > 10')['total_area'].median(), 'кв.м')
print('Медианная стоимость объектов с числом комнат больше 10:', data.query('rooms > 10')['last_price'].median(), 'руб')


# Гипотеза подтвердилась. **Нулевые значения характерны только для студий или объектов со свободной планировкой**. Большое число комнат характерно для объектов с достаточно большой общей площадью и высокой стоимостью, что также выглядит логично. Удалив ранее сверхдорогие объекты снизили максимальное число комнат до 16

# - **ceiling_height** -  очевидно содержит выбросы и аномалии: минимальное значение - 1 метр, максимальное - 100. По нормам СНиП, *минимальная допустимая* высота потолка - 2,5 м. Удалим строки со значениями ниже установленной нормы:

# In[29]:


data.drop(index=data.query('ceiling_height < 2.5').index,inplace=True)


# Потолок выше 4.5 м скорее *аномалия*. Рассмотрим объекты с потолками выше 4.5 метров

# In[30]:


data.query('ceiling_height > 4.5').hist('ceiling_height', bins=100, figsize=(10,3))
plt.xlabel('Метры')
plt.ylabel('Количество объектов')
plt.title('Объекты с потолками выше 4.5 м')
plt.show()


# Высоту от 4.5 до 25 метров считаем выбросами: 4.5-5м - аномально высокий потолок, 5-25м - скорее ошибка в заполнении данных. Потолки выше 40м тоже следует удалить. А вот значения 25-40 метров уже более интересны - очевидно, имелось в виду 2.5-4 метра, заменим эти значения. 

# In[31]:


# удаление строк со значениями потолка от 4.5 до 25 и более 40:
data.drop(index=data.query('4.5 < ceiling_height < 25 or ceiling_height > 40').index,inplace=True)

# цикл, заменяющий высоту потолка 25-40 на 2.5-4 соответственно:
for height in data['ceiling_height'].unique():
    if 25<=height<=50:  
        data.loc[data['ceiling_height']==height, 'ceiling_height'] = height/10
print('Минимальное значение высоты потолка:', data['ceiling_height'].min())
print('Максимальное значение высоты потолка:', data['ceiling_height'].max())


# * **floors_total** - нулевых значений нет, минимальное значение: 1 этаж, что допустимо, смущает максимальное значение 60. На сегодняшний день известно, что самое многоэтажное многоквартирное здание в Ленобласти - 37 этажей. Удалим выбросы, превышающие это значение

# In[32]:


data.drop(index=data.query('floors_total>37').index,inplace=True)
print('Максимальный этаж здания:', data['floors_total'].max())


# * **living_area** - очевидно содержит выбросы - недопустимое минимальное значение 2 кв.м. Снова обратимся к нормам СНиП: минимальный размер жилой площади - 9 кв.м. Отбросим неподходящие значения:

# In[33]:


data.drop(index=data.query('living_area<9').index,inplace=True)
print('Минимальная жилая площадь:', data['living_area'].min())


# Прицельно посмотрим на объекты с жилой площадью более 100 кв.м:

# In[34]:


data.query('living_area>100').hist('living_area', bins=50, figsize=(10,5))
plt.xlabel('кв.м')
plt.ylabel('Количество объектов')
plt.title('Объекты с жилой площадью > 100 кв.м')
plt.show()
print('Максимальная жилая площадь:', data['living_area'].max())


# Ранее мы допустили максимальную общую площадь в 300 кв.м. Максимальная жилая площадь теперь составляет 225.9 кв.м., что допустимо

# * **kitchen_area** - площадь кухни так же содержит экстримально низкие значения. Удалим объекты с кухнями менее 3 кв.м

# In[35]:


data.drop(index=data.query('kitchen_area<3').index,inplace=True)
print('Минимальная  площадь кухни:', data['kitchen_area'].min())


# Теперь прицельно посмотрим на кухни больше 20 кв.м.:

# In[36]:


data.query('kitchen_area > 20').hist('kitchen_area', bins=50, figsize=(10,5))
plt.xlabel('кв.м')
plt.ylabel('Количество объектов')
plt.title('Объекты с площадью кухни > 20 кв.м')
plt.show()


# Удалим малочисленные максимальные значения - кухни, площадью более 60 кв.м:

# In[37]:


data.drop(index=data.query('kitchen_area >60').index,inplace=True)
print('Максимальная  площадь кухни:', data['kitchen_area'].max(), 'кв.м')


# * **balcony** - значения от 0 до 5. Построим на гистограмму:

# In[85]:


data.groupby('balcony')['living_area'].count().plot(kind='bar')
plt.xlabel('Балконы')
plt.ylabel('Количество объектов')
plt.title('Количество балконов в объекте')
plt.show()


# Распределение похоже на нормальное, больше трех балконов, конечно, редкость, но тоже встречается

# **Картографические данные:**
# 
# - **city_centers_nearest, parks_nearest, ponds_nearest, parks_around3000, ponds_around3000** - не наблюдается аномалий, все значения в порядке
# -**airports_nearest** - смущает минимальное значение - 0. Объект(ы) находятся в самом аэропорту?
# Сколько таких объектов в радиусе 5км?

# In[86]:


print('Число объектов в радиусе 5 км от аэропорта:', len(data.query('airports_nearest<5000')))


# Удалим этот объект и снова посмотрим на данные:

# In[87]:


data.drop(index=data.query('airports_nearest<5000').index,inplace=True)
data.describe()


# **Вывод по выбросам и аномальным значениям**
# 
# Проверены и обработаны выбросы в каждом столбце. Данные о стоимости, площадях, высоте потолков приведены к нормальным значениям максимумов и минимумов, удалены невозможные значения общего числа этажей, удален объект, находящийся в аэропорту, проверена допустимость нулевых значений числа комнат
# 

# ## Добавление новых столбцов в таблицу

# Для дальнейшего анализа необходимо добавить новые столбцы:
# 
# - *per_square_price* - цена одного кв.м.
# - *week_day* - день недели публикации (0 - понедельник, 1- вторник, ..., 6 - воскресенье)
# - *month* - месяц публикации объявления (значения от 1 до 12)
# - *year* - год публикации объявления
# - *city_centers_nearest_km* - расстояние до центра города в километрах
# - *floor_type* - тип этажа объекта: 'первый', 'последний' или 'другой'
# 

# In[88]:


# добавление столбца с ценой 1кв.м, рассчитывается как стоимость объекта поделенная на его общую площадь:
data['per_square_price'] = data['last_price'] / data['total_area']
data['per_square_price'] = data['per_square_price'].round(2)

# добавление столбцов с днем, месяцем и годом публикации, извлекаются соответствующие данные из столбца с датой:
data['week_day'] = data['first_day_exposition'].dt.dayofweek
data['month'] = data['first_day_exposition'].dt.month
data['year'] = data['first_day_exposition'].dt.year

# добавление столбца с расстоянием в км до центра города: переводим в км и окгругляем имеющиеся данные в метрах:
data['city_centers_nearest_km'] = round(data['city_centers_nearest'] / 1000)

# функция для определения типа этажа. Если этаж первый, то и тип этажа 'первый', если этаж равен общему 
# числу этажей в доме, присвоим тип 'последний', остальные этажи получат тип 'другой':
def floor_type(row):
    try:
        if row['floor'] == 1:
            return 'первый'
        elif row['floor'] == row['floors_total']:
            return 'последний'
        return 'другой'
    except:
        print('Ошибка')
# добавление результатов работы функции в столбец с типом этажа
data['floor_type'] = data.apply(floor_type, axis=1)

# вывод информации для проверки
display(data.info())
data.head(10)


# **Вывод**
# 
# Необходимые для дальнейшего анализа столбцы добавлены. Встречаются ожидаемые пропуски в новом столбце 'city_centers_nearest_km' - связаны с пропусками в столбце 'city_centers_nearest'

# ## Исследовательский анализ данных

# ### Построение гистограмм по интересующим параметрам
# 

# #### **Площади: общая, жилая, площадь кухни**

# ##### Общая площадь

# In[92]:


data.plot(kind='hist', y='total_area', bins=100, grid=True, figsize=(10,5), legend=False)
plt.title('Общая площадь объектов')
plt.xlabel('кв.м')
plt.ylabel('Количество объектов')
plt.show()
print('Наибольшие значения площади:') 
print(data['total_area'].sort_values(ascending=False).head())
print()
print('Наименьшие значения площади:') 
print(data['total_area'].sort_values().head())
print()
print('Медианный размер площади:', data['total_area'].median(), 'кв.м')


# В целом распределение выглядит нормальным. **Больше всего квартир имеют площадь чуть менее 50 кв.м** при этом **медианное значение площади - 52 кв.м**, объекты менее 2 5кв.м встречаются уже значительно реже. Много больших квартир - площадью 50-100 кв.м, объектов площадью 100-150 кв.м уже меньше, а объкты более 200 кв.м. - редкость, таких значений немного.

# ##### Жилая площадь

# In[94]:


data.plot(
    kind='hist',
    y='living_area',
    bins=100,
    grid=True,
    figsize=(10,5),
    legend=False
)
plt.title('Жилая площадь объектов')
plt.xlabel('кв.м')
plt.ylabel('Количество объектов')
plt.show()
print('Наибольшие значения жилой площади:') 
print(data['living_area'].sort_values(ascending=False).head())
print()
print('Наименьшие значения жилой площади:') 
print(data['living_area'].sort_values().head())
print()
print('Медианный размер площади:', data['living_area'].median(), 'кв.м')


# Из гистограммы видим, что **чаще всего в наборе данных встречаются объекты с площадью 10-50 кв.м.** Посмотрим отдельно на такие объекты и выявим пиковые значения:

# In[95]:


data.plot(
    kind='hist',
    y='living_area',
    range=(10,50),
    bins=100,
    grid=True,
    figsize=(10,5),
    legend=False
)
plt.title('Объекты с жилой площадью 10-50 кв.м')
plt.xlabel('кв.м')
plt.ylabel('Количество объектов')
plt.show()
print('Самые частые размеры площади:')
print(data['living_area'].value_counts().head(5))


# Чаще всего наши объекты имеют жилую площадь 18, 17 и 30 кв.м. **Медианный размер площади: 30 кв.м.**  Минимальное значение 9 кв.м. ранее определили как допустимое, судя по гистограмме, таких объектов немного. Объекты с жилой площадью > 150 кв.м. очень редкие, их частота не противоречит количеству объектов с большой общей площадью.

# ##### Площадь кухни

# In[96]:


data.plot(
    kind='hist',
    y='kitchen_area',
    bins=100,
    grid=True,
    figsize=(10,5),
    legend=False
)
plt.title('Площадь кухни объектов')
plt.xlabel('кв.м')
plt.ylabel('Количество объектов')
plt.show()
print('Наибольшие значения площади кухни:') 
print(data['kitchen_area'].sort_values(ascending=False).head())
print()
print('Наименьшие значения площади кухни:') 
print(data['kitchen_area'].sort_values().head())
print()
print('Медианный размер площади:', data['kitchen_area'].median(), 'кв.м')


# Больше всего значений располагаются в диапазоне **6-10 кв.м., медианный размер: 9.1 кв.м,** встречается небольшое число объектов с кухнями менее 5 кв.м. Аномально большие площади ранее удалили, макимальное значение - 60 кв.м. В целом, кухни более 30 кв.м. встречаются редко

# #### Стоимость объекта

# In[98]:


data.plot(
    kind='hist',
    y='last_price',
    bins=50,
    grid=True,
    figsize=(10,5),
    legend=False
)
plt.title('Стоимость объектов')
plt.xlabel('10 млн.руб')
plt.ylabel('Количество объектов')
plt.show()
print('Наибольшее значение стоимости:') 
print(data['last_price'].sort_values(ascending=False).head())
print()
print('Наименьшее значение стоимости:') 
print(data['last_price'].sort_values().head())
print()
print('Медианная стоимость:', data['last_price'].median())
print('Средняя стоимость:', data['last_price'].mean())


# Общая гистограмма по стоимости дает мало информации из-за большого размаха значений. Больше всего значений приходится на стоимость до 25 млн.руб. Медианная стоимость составляет **4.6 млн.руб**, средняя имеет более высокое значения за счет дорогих объектов - **6.08 млн.руб**. Начиная со стоимости от 10 млн частота объявлений видимо сокращается. Дорогих объектов значительно меньше. **Число объектов дороже 40 млн.руб практически сливается с нулем**

# #### Количество комнат

# In[105]:


data.groupby(by='rooms')['rooms'].count()    .plot(kind='bar', figsize=(10,5), xlabel='Количество комнат', 
          ylabel = 'Количество объектов', 
          title='Количество комнат в объектах');


# Больше всего объектов с **одной или двумя комнатами**. Видим ожидаемый минимум - 0, ранее мы определили, что значения характерны для студий и объектов со свободной планировкой. Шесть и более комнат встречаются редко.

# #### Высота потолков

# In[108]:


data.plot(
    kind='hist',
    y='ceiling_height',
    bins=50,
    grid=True,
    figsize=(10,5),
    label='Высота потолка',
)
plt.xlabel('Метры')
plt.ylabel('Количество объектов')
plt.title('Высота потолков')
plt.show()
print('Медианное значение высоты потолка:', data['ceiling_height'].median(), 'м')


# **Больше всего объектов с минимальной высотой потолка - 2.5м.** Большинство значений расположено в диапазоне 2.5-3м, что ожидаемо. Встречаются объекты с потолками 3-3,5м, более высокий потолок - редкость

# #### **Этажи: этаж объекта, тип этажа, общее число этажей в здании**

# ##### Этаж объекта

# In[112]:


data.groupby(by='floor')['floor'].count()    .plot(kind='bar',figsize=(10,5), xlabel='этаж', ylabel='Количество объектов', title='Распределение объектов по этажам');


# В наших данных чаще всего встречается **второй этаж**, большинство объектов расположены на 1-5 этаже. Более 2700 объектов располагается на первом этаже.

# ##### Тип этажа

# In[114]:


data.groupby(by='floor_type')['floor_type'].count()    .plot(kind='bar', figsize=(10,5), ylabel='Кличество объектов', xlabel='',
          title='Распределение объектов по типам этажей');


# Меньше всего объектов на первом этаже - около 2700, чуть больше объектов расположено на последнем этаже. **Все остальные объекты  не относятся ни к первому, ни к последнему этажу.**

# ##### Общее число этажей в здании

# In[117]:


data.groupby(by='floors_total')['floors_total'].count()        .plot(kind='bar', figsize=(10,5), ylabel='Количество объектов', xlabel='Количество этажей в здании',
              title='Этажность здания');


# Преимущественно наши объекты находятся в **пятиэтажках**, достаточно часто встречаются девятиэтажные здания. Есть небольшое число одноэтажных домов и 36-этажных высоток

# #### Картографические данные

# ##### Расстояние до центра города

# In[124]:


data.plot(
    kind='hist',
    y='city_centers_nearest_km',
    bins=50,
    grid=True,
    figsize=(10,5),
    title='Расстояние до центра города',
    legend=False
)
plt.xlabel('км')
plt.ylabel('Количество объектов')
plt.show()
print('Всего учитываемых объектов:', len(data.query('city_centers_nearest_km > 0')))
print('Максимальное учитываемое расстояние:', data['city_centers_nearest_km'].max()) 
print('Минимальное расстояние:', data['city_centers_nearest_km'].min()) 
print('Медианное расстояние:', data['city_centers_nearest_km'].median())


# **Больше всего объектов распалагается в радиусе 10-20 км от центра города**, пиковое значение ~12км. Не мало объектов расположены в пределах 10 км от центра, есть квартиры, находящиеся в самом центре. Максимальная отдаленность от центра - 66 км, объекты расположенные далее здесь не рассматриваются. **Медианное расстояние для рассматриваемых объектов: 13 км.**

# ##### Расстояние до ближайшего аэропорта

# In[129]:


data.plot(
    kind='hist',
    y='airports_nearest',
    bins=100,
    grid=True,
    title='Расстояние до аэропорта',
    figsize=(10,5),
    legend=False
)
plt.xlabel('Метры')
plt.ylabel('Количество объектов')
plt.show()
print('Всего учитываемых объектов:', len(data.query('airports_nearest > 0')))
print('Максимальное учитываемое расстояние:', data['airports_nearest'].max())
print('Минимальное расстояние:', data['airports_nearest'].min()) 
print('Медианное расстояние:', data['airports_nearest'].median())


# Небольшое число объектов находятся в радиусе 10 км от аэропорта. Почти тысяча объектов находятся на расстоянии 19 км. от аэропорта. Учитываем, что в диаграмме представлены далеко не все объекты - многие находятся дальше, чем 90 км. от аэропорта. **Медианное расстояние для рассматриваемых объектов: 26,7 км.**

# ##### Расстояние до ближайшего парка

# In[133]:


data.plot(
    kind='hist',
    y='parks_nearest',
    bins=100,
    grid=True,
    title='Расстояние до ближайшего парка',
    legend=False,
    figsize=(10,5)
)
plt.xlabel('Метры')
plt.ylabel('Количество объектов')
plt.show()
print('Всего учитываемых объектов:', len(data.query('parks_nearest > 0')))
print('Максимальное учитываемое расстояние:', data['parks_nearest'].max())
print('Минимальное расстояние:', data['parks_nearest']. min()) 
print('Медианное расстояние:', data['parks_nearest'].median())


# У большинства рассматриваемых объектов парк располагается в радиусе ~400 метров, также помним, что многие объекты не учтены в диаграмме (те, для которых ближайший парк находится далее 3.2 км). **Медианное расстояние для рассматриваемых объектов: 455 м.**

# ##### Расстояние до ближайшего водоема

# In[136]:


data.plot(
    kind='hist',
    y='ponds_nearest',
    bins=100,
    grid=True,
    figsize=(10,5),
    title='Расстояние до ближайшего водоема',
    legend=False
)
plt.xlabel('Метры')
plt.ylabel('Количество объектов')
plt.show()
print('Всего учитываемых объектов:', len(data.query('ponds_nearest > 0')))
print('Максимальное учитываемое расстояние:', data['ponds_nearest'].max()) 
print('Минимальное расстояние:', data['ponds_nearest'].min()) 
print('Медианное расстояние:', data['ponds_nearest'].median())


# Снова вспоминаем, что не учтены объекты, не имеющие водоема в радиусе 1.5 км. Объекты рядом с водоемами чаще находятся в радиусе 400-600 метров. **Медианное расстояние для рассматриваемых объектов: 505м.**

# #### **День и месяц публикации объявления**

# In[145]:


data.groupby(by='week_day')['week_day'].count().plot(kind='bar', 
                                                     figsize=(10,5),
                                                     ylabel='Количество объявлений', 
                                                     xlabel='День недели',
                                                    title= 'Количество публикаций по дням недели')
plt.show()


# Чаще всего объявления публикуют **во вторник и четверг**, реже всего - в выходные

# In[146]:


data.groupby(by='month')['month'].count().plot(kind='bar', 
                                               figsize=(10,5),
                                               ylabel='Количество объявлений', 
                                               xlabel='Месяц',
                                              title='Количество публикаций по месяцам')
plt.show()


# Активнее всего публикуют объявления в **феврале и марте**, реже всего - в январе и мае, возможно, связано с большим количество выходных в этих месяцах

# ### Как быстро продаются объекты?

# Посмотрим на гистограмму:

# In[154]:


data['days_exposition'].plot(kind='hist', figsize=(20,7), grid=True,bins=50)
plt.title('Количество дней от публикации до снятия объявления')
plt.ylabel('Количество объявлений')
plt.xlabel('Количество дней')
plt.show()
data['days_exposition'].describe()


# Основной объем значений расположен в диапазоне 1-100 дней.
# 
# Минимальный срок публикации - 1 день, макисимальный - 1580 дней.
# 
# **Медианное значение: 95 дней, среднее: 180 дней** (очевидно, экстримальные максимальные значения 'тянут наверх' среднее значение)
# 
# Начиная с 250-го дня, частота объявлений не достигает 500 и практически постоянно снижается. На 700-й день значения не достигают 200. *Ограничимся максимальным сроком публикации в 730 дней (два года)*, сохраним такие данные в переменной 'data_optimal_exposition' и посмотрим как изменятся средние показатели:

# In[159]:


print('Число объявлений, снятых с публикации через два года и более:', len(data.query('days_exposition >730')))
data_optimal_exposition = data.query('days_exposition <= 730')
data_optimal_exposition['days_exposition'].plot(kind='hist', figsize=(20,7), grid=True,bins=50)
plt.title('Количество дней от публикации до снятия объявления')
plt.xlabel('Количество дней')
plt.ylabel('Количество объявлений')
plt.show()
print('Характеристики столбца "days_exposition":')
data_optimal_exposition['days_exposition'].describe()


# Среднее и медиана изменились - опустились до **150.7 и 90** соответственно. Основной объем значений по прежнему располагается в диапазоне 1-100. Посмотрим на пиковые значения в этом диапазоне.

# In[156]:


data_optimal_exposition.groupby(by='days_exposition')['days_exposition'].count().sort_values(ascending=False).head(10)


# Предполагаю, что выбивающиеся значения в 45 и 60 дней связаны с условиями размещения на платформе (например, истекает бесплатное размещение или наоборот, заканчивается срок платного). Опираясь на это предположение, считаем медианное значение типичной длительностью продажи. 
# 
# Итого:
# * **чаще всего** объекты продаются за 90 дней
# * **быстрые продажи** - до 90 дней
# * **долгие продажи** - от 90 дней до двух лет
# * **сверхдолгие продажи** - более двух лет

# ### Какие факторы больше всего влияют на общую стоимость объекта?

# Пронализируем, как зависит цена от следующих факторов:
# * общей площади
# * жилой площади
# * площади кухни
# * количества комнат
# * этажа, на котором расположена квартира (первый, последний, другой)
# * даты размещения (день недели, месяц, год)

# #### Зависимость от метража

# ##### Общая площадь

# In[166]:


data.plot(x='total_area',
          y='last_price',
          kind='scatter',
          figsize=(10,5), 
          grid=True, 
          alpha=0.4, 
          xlabel ='Общая площадь, кв.м', 
          ylabel='Стоимость, 10 млн.руб',
         title='Зависимость стоимости от общей площади')
plt.show()
print('Коэффициент корреляции между общей площадью и ценой:', data['total_area'].corr(data['last_price']).round(3))


# Наблюдаем положительную, достаточно выраженную **(0.769)** корреляцию. Встречаются аномалии - квартира менее 50 кв.м стоимостью около 30 млн., квартира ~180 кв.м. стоимостью до 5 млн., но в целом, **чем больше площадь - тем выше цена.** 

# ##### Жилая площадь

# In[168]:


data.plot(x='living_area',
          y='last_price', 
          kind='scatter', 
          figsize=(10,5),
          grid=True, 
          alpha=0.4, 
          xlabel ='Жилая площадь площадь, кв.м', 
          ylabel='Стоимость, 10 млн.руб',
          title='Зависимость стоимости от жилой площади')
plt.show()
print('Коэффициент корреляции между жилой площадью и ценой:', data['living_area'].corr(data['last_price']).round(3))


# Для жилой площади корреляция со стоимостью выражена слабее, чем для общей: **0.675**. Общая тенденция (большая площадь=высокая цена) все еще  наблюдается, но здесь мы также видим следующее:
# 
# - если **общая площадь** объекта <50 кв.м. то его стоимость не превышает 10 млн.руб.(за редким исключением). Если размер <50 кв.м. имеет **жилая площадь**, то ее стоимость уже преимущественно лежит в пределах 20 млн.руб. Так же такие объекты могут стоит более 30 млн. руб., а объекты с общей площадью до 50кв.м. - нет
# 
# - для объектов с **жилой площадью 50-100 кв.м**. чаще встречается стоимсоть выше 50 млн., в то время как для объектов с такой же **общей площадью** такая стоимость - единичный случай
# 
# - объекты с **жилой площадью > 100 кв.м.** и объекты с такой же **общей площадью** имеют схожее распределение цены

# ##### Площадь кухни

# In[170]:


data.plot(x='kitchen_area',
          y='last_price', 
          kind='scatter', 
          figsize=(10,5), 
          grid=True, 
          alpha=0.4,
          xlabel ='Площадь кухни, кв.м', 
          ylabel='Стоимость, 10 млн.руб',
          title='Зависимость стоимости от площади кухни')
plt.show()
print('Коэффициент корреляции между площадью кухни и ценой:', data['kitchen_area'].corr(data['last_price']).round(3))


# Положительная корреляция все еще есть, но выражена еще слабее: **0,581**. Объекты с маленькими кухнями (до 5кв.м) практически никогда не стоят дороже 10 млн.руб, самый популярный размер кухни в нашем наборе данных - 10-20 кв.м, объекты с такими кухнями имеют большой диапазон цен - чаще всего они стоят до 20 млн.руб, но цены могу доходить и до 60 млн.руб
# 
# По анализу зависимости цены от площади можно отметить, что в **большей степени цена зависит от общей площади, площадь кухни и жилая - скорее сопутствующие факторы**

# #### Зависимость от числа комнат

# In[171]:


data.plot(x='last_price',
          y='rooms', 
          kind='scatter', 
          figsize=(10,5), 
          grid=True, 
          alpha=0.4,
          ylabel ='Количество комнат', 
          xlabel='Стоимость, 10 млн.руб',
          title ='Зависимость стоимость от количества комнат')

print('Коэффициент корреляции количества комнат и цены:', data['rooms'].corr(data['last_price']).round(3))


# Наблюдаем положительный коэффициент корреляции: **0.48**. Корреляция выражена не явно, можем заметить, что в ценовом диапазоне до 10 млн.руб практически одинаково часто встречаются и однокомнатные, и двух-, и трех-, и даже четырехкомнатные объекты. Удивительным выглядит факт,что самые высокие цены не связаны с большим числом комнат: объекты стоимостью 40-80 млн.руб ограничиваются 7 комнатами максимум. Посмотрим на медианные и средние значения стоимости.

# In[174]:


ax = data.pivot_table(index='rooms',values='last_price').plot(y='last_price', grid=True, style='o-', label='Средняя стоимость')
    
(
    data.pivot_table(index='rooms',values='last_price', aggfunc='median')
        .plot(y='last_price',
              kind='line',
              grid=True, 
              figsize=(10,5), 
              alpha= 0.4,
              style='o-', 
              ax=ax,
              label='Медианная стоимость', 
              title='Зависимость стоимости от числа комнат',
             xlabel='Число комнат',
             ylabel='Стоимость, 10 млн.руб')
);


# Для квартир, имеющих до шести комнат, выделяется следующая закономерность: чем **больше комнат, тем выше и средняя и медианная стоимости**.

# #### Зависимость от типа этажа

# In[198]:


data.plot(x='last_price',
          y='floor_type', 
          kind='scatter', 
          figsize=(10,5), 
          grid=True, 
          alpha=0.4,
          title = 'Зависимость стоимости от типа этажа',
          ylabel ='', 
          xlabel='Стоисоть, 10 млн.руб',
         );


# * **объекты с типом  этажа 'другой'** могут иметь любую стоимость, такие объекты всречаются во всех ценовых диапазонах. Более того, доргие объекты стоимостью > 30 млн. руб преимущественно располагаются только на этом типе этажа
# * **объекты на первом этаже** редко стоят более 20 млн.руб, в основном сгруппированы в диапазоне 0-10 млн.руб. Встречается всего 7 вариантов дороже 30 млн.руб
# * **объекты на последнем этаже** преимущественно расположены в диапазоне до 20 млн. руб., имеют более высокую чем объекты на первом плотность в диапазоне 20-30 млн. руб. Встречаются также объекты дороже 30 млн.руб

# In[197]:


ax = data.pivot_table(index='floor_type',values='last_price').plot(y='last_price',
                                                                   grid=True, style='o-',label='Средняя стоимость')
    
data.pivot_table(index='floor_type',values='last_price', aggfunc='median')    .plot(y='last_price',
           kind='line',
           grid=True, 
           figsize=(10,7), 
           style='o-', 
           ax=ax,
           label='Медианная стоимость', 
           title='Зависимость стоимости от типа этажа',
           xlabel='',
           ylabel='Стоимость, 10 млн.руб');


# Выводы из анализа средней и медианной стоимости:
# * **этаж типа 'другой'** имеет самые высокие медианную и среднюю стоимости - около 4,75 млн.руб и 6,4 млн.руб соответсвенно
# * у **последнего этажа** эти значения уже существенно ниже: медиана составляет около 4,3 млн.руб, а с реднее 6 млн.руб
# * **первый этаж** имеет самые низкие значения - медианная стоимость не достигает 4 млн.руб, а средняя составляет около 4,6 млн.руб

# #### Зависимость от даты публикации

# ##### Зависимость от дня недели

# In[201]:


data.plot(x='last_price',
          y='week_day', 
          kind='scatter', 
          figsize=(10,5), 
          grid=True, 
          alpha=0.4,
          title = 'Зависимость стоимости от дня публикации',
          ylabel ='День недели', 
          xlabel='Стоимость, 10 млн.руб',
         )
plt.show()
print('Коэффициент корреляции между днем недели и стоимостью:', data['week_day'].corr(data['last_price']).round(3))


# Наблюдаем небольшой, слабо выраженный отрицательный коэффициент корреляции: **-0.014**

# In[205]:


ax = data.pivot_table(index='week_day',values='last_price').plot(y='last_price', kind='line', style='o-', 
                                                                 label='Средняя стоимость')
(
    data.pivot_table(index='week_day', values='last_price',aggfunc='median')
        .plot(y='last_price',
              kind='line', 
              ax=ax,
              figsize=(10,5),
              style='o-', 
              label='Медианная стоимость',
              grid=True, 
              ylabel ='Стоимость, млн.руб.', 
              xlabel='День недели',
              title='Зависимость стоимости от дня публикации')
);


# Видимой зависимость от дня недели публикации **не наблюдается**.

# ##### Зависимость от месяца публикации

# In[208]:


data.plot(x='last_price',
          y='month', 
          kind='scatter', 
          figsize=(10,5), 
          grid=True, 
          alpha=0.4,
          ylabel ='Месяц публикации', 
          xlabel='Стоимость, 10 млн.руб',
          title = 'Зависимость стоимости от месяца публикации'
         )
plt.show()
print('Коэффициент корреляции между месяцем публикации и стоимостью:', data['month'].corr(data['last_price']).round(3))


# Коэффициент корреляции практически нулевой: **0.004**. Можно сказать, что зависимости нет.

# In[211]:


ax = data.pivot_table(index='month',values='last_price').plot(y='last_price', kind='line', style='o-', label='Средняя стоимость')
(
    data.pivot_table(index='month', values='last_price',aggfunc='median')
        .plot(y='last_price',
              kind='line', 
              ax=ax,
              figsize=(10,5),
              style='o-', 
              label='Медианная стоимость',
              grid=True, 
              ylabel ='Стоимость, млн.руб.', 
              xlabel='месяц',
              title='Зависимость стоимости от месяца публикации')
);


# ##### Зависимость от года публикации

# In[212]:


print('Коэффициент корреляции количеством комнат и ценой:', data['year'].corr(data['last_price']).round(3))


# Наблюдаем слабо выраженный отрицательный процент корреляции: **-0.051**.

# In[215]:


ax = data.pivot_table(index='year',values='last_price').plot(y='last_price', kind='line', style='o-', label='Средняя стоимость')
(
    data.pivot_table(index='year', values='last_price',aggfunc='median')
        .plot(y='last_price',
              kind='line', 
              ax=ax,
              figsize=(10,5),
              style='o-', 
              label='Медианная стоимость',
              grid=True, 
              ylabel ='Стоимость, 10 млн.руб', 
              xlabel='Год',
              title='Стоимость объектов по годам публикации')
);


# Наблюдаем резкое падение стоимости относительно 2014 г. Ранее выявили, что стоимость объекта тесно связана с его площадью, посмотрим, как менялись средние и медианные значения общей площади в каждом году:

# In[221]:


ax = data.pivot_table(index='year',values='total_area').plot(y='total_area', kind='line', style='o-', label='Среднее значение')
(
    data.pivot_table(index='year', values='total_area',aggfunc='median')
        .plot(y='total_area',
              kind='line', 
              ax=ax,
              figsize=(10,5),
              style='o-', 
              label='Медианное значение',
              grid=True, 
              ylabel ='Общая площадь, кв.м', 
              xlabel='Год',
              title='Частые значения общей площади: динамика по годам')
);


# График зависимости от площади очень похож на график зависимости от цены - наблюдаем такое же резкое падение к 2015 г., небольшой прирост в 2018-2019. Цены снижаются вслед за снижением средних размеров площади.

# **Самые высокие медианные и средние значения** цены наблюдаются у объявлений, опубликованных в 2014 году.
# 
# В 2015 году резко упали средние и медианные значения площади, если в 2014 г. средняя площадь продаваемых объектов составляла 85 кв.м, то в 2015 это значение составляет 70 кв.м. Такие негативные изменения неизбежно влекут за собой понижение средней стоимости от 11.5 млн к 7.5 млн. Медианная стоимость тоже соразмерно понижается.
# 
# Влоть до 2018 года средние размеры площади продолжали уменьшаться, средняя стоимость вслед за ними.
# 
# **В период с 2018 по 2019 и средняя, и медианная площади возросли**, цены, соответственно тоже показали прирост - средня цена около 6.5 млн.руб, медиана порядка 5 млн.руб

# ### Топ-10 городов с самым большим числом объявлений: анализ стоимости квадратного метра

# In[227]:


# создание переменной, содержащей название локаций и количество их значений, срез первых 10: 
top_10_cities = data['locality_name'].value_counts()[:10]

# создание сводной таблицы: срез исходной таблицы с условием'locality_name' содержит индексы 'locality_name',
# подсчет средней цены за кв.м. по выбранным локациям и сортировка по убыванию цены:
top_10 = data.query('locality_name in @top_10_cities.index').pivot_table(index='locality_name',values='per_square_price').sort_values(by='per_square_price', ascending= False)
#округление полученных цен до двух знаков после запятой:
top_10['per_square_price'] = top_10['per_square_price'].round(2)

print(top_10)
top_10.sort_values(by='per_square_price').plot(kind='barh', figsize=(10,5), legend=False)
plt.title('Топ-10 городов по количеству объявлений: стоимость кв.м')
plt.xlabel('Стоимость кв.м, руб')
plt.ylabel('')
plt.show()


# В топ ожидаемо вошел Санкт-Петербург и близкие к нему города и поселки.
# 
# Самая высокая цена одного кв.м. в столице области - Санкт-Петербурге, 112.949 руб.
# 
# Замыкает рейтинг Выборг с ценой 58.238 руб./кв.м.

# ### Санкт-Петербург: зависимость стоимости от расстояния до центра города

# In[231]:


(
    data.query('locality_name == "санкт-петербург"')
    .pivot_table(
        index='city_centers_nearest_km',
        values='last_price',)
    .plot(kind='line',
          figsize=(10,5), 
          grid=True, 
          ylabel ='Стоимость, 10 млн.руб', 
          xlabel='Отдаленность от центра, км',
          title = 'Зависимость стоимости от расстояния до центра города',
         legend = False)
)
plt.show()
print('Коэффициент корреляции количеством комнат и ценой:',       data.query('locality_name == "санкт-петербург"')['city_centers_nearest_km']      .corr(data.query('locality_name == "санкт-петербург"')['last_price']).round(3))


# Наблюдаем отрицательный процент корреляции **-0.391**
# 
# Неудивительно, что самая высокая средняя стоимость у объектов, находящихся в самом центре города: 22.5 млн.руб.
# У объектов в радиусе 1-7 км от центра средняя стоимость колеблется от 10.5 до 14 млн.руб, стоимость более отдаленных объектов идет на убыль (за исключением некоторых пиков)
# 
# **Самые дорогие объекты в Санкт-Петербурге располагаются в центре  и в радиусе 3 км. от него**

# ## Общий вывод

# После обработки данных от выбросов и аномальных значений число записей сократилось с 23 699 до 23 379.
# 
# Перед проведением исследовательского анализа данные были обработаны от нулевых и аномальных значений, изменены некорректные типы данных, обработаны дубликаты, расчитаны и внесены в таблицу новые необходимые значения (стоимость кв.м., типы этажа и др.). Устранены редкие значения и статистические выбросы
# 
# В исследовательском анализе участвовали объекты стоимостью от 0.43 до 75 млн.руб, общей площадью от 12 до 300 кв.м., опубликованные в период 2014-2019 г.
# 
# 
# 
# Проанализированы **основные параметры объектов:**
# 
# * *площадь* - медианные значения для расмматриваемых объектов: общая - 52 кв.м., жилая - 30 кв.м., кухни - 9.1 кв.м
# * *стоимость* - медианная 4.6 млн.руб, средняя 6.07 млн.руб. Большинство объектов располагаются в диапазоне до 10 млн.руб
# * чаще всего продаются квартиры с *одной или двумя комнатами*, чуть реже - трехкомнатные, большее число комнат встречается нечасто
# * чаще всего объекты имеют *невысокий потолок*: 2.5-2.65 м
# * объекты обычно расположены в *пятиэтажных и девятиэтажных домах*, в основном *не на первом и не на последнем этажах*
# * порядка *17.8 тысяч объектов расположены в часе езды от центра и/или от аэропорта.* Обычно такие объекты расположены в 13км. от центра и 28 км. от аэропорта
# * около 8 тысяч объектов имеют *парк на расстоянии менее часа ходьбы*, а 9 тысяч имеют *водоем в радиусе получаса ходьбы*.

# **Скорость продажи квартиры** 
# 
# Самое позднее снятие объявлении с публикации - спустя 1580 дней.
# 
# Большинство объявлений снимается с публикации в течение 100 дней. **Обычно объекты продаются в течение 43-207 дней**. Чаще всего продажа происходит на **90-й день** с начала публикации
# * **быстрые продажи** - до 43 дней
# * **долгие продажи** - от 207 дней до двух лет
# * **сверхдолгие продажи** - более двух лет

# **Факторы, влияющие на стоимость объекта**
# 
# * Обнаружена **прямая зависимость стоимости от общего метража: больше квартира = выше цена**. Квартиры размером до 50 кв.м. практически не превышают стоимость до 10 млн.руб. Квартиры 50-100 кв.м. имеют размах цен уже до 20 млн.руб. Аномалии встречаются достаточно редко. Зависимость от размера жилой площади и площади кухни выражена уже слабее, все же **общая площадь играет бОльшую роль.**
# 
# * **Чем больше комнат, тем выше цена**. Прямая зависимость - однокомнатные квартиры в среднем стоят 3.8 млн.руб, трехкомнатные - 7.9 млн., шестикомнатные стоят уже порядка 20.7 млн. Медианные цены растут в схожих пропорциях
# 
# * Большое значение имеет **тип этажа**. Квартиры на *первом этаже стоят меньше всего* - средняя стоимость 4.6 млн.руб, квартиры  *на последнем этаже  чуть дороже* - 5.9 млн. Средняя стоимость объектов на других этажах - 6.3 млн.
# 
# * Выделяющейся зависимости от дня недели или месяца публикации нет. 
# 
# * В 2014 году отмечены *самые высокие средние и медианные значения стоимости*: 11.6 млн.руб и 7.6 млн.руб соответственно.  **2015 год характеризуется резким падением обоих показателей**: средняя цена составляет уже 7.3 млн.руб, медиана 5.2 млн. Такое падение определенно связано с тем, что резко упала средняя площадь продаваемых объектов. **Цена тесно связана с площадью, меньше средняя площадь - меньше средня стоимость**, отсюда и падение цен  вплоть до 2018 года. **В период с 2018 по 2019 средние значения площади начали расти**: неразрывно с этим фактом  повысилась и медианная стоимость (+0,5 млн. до 5млн.), и средняя (на 0,65 млн до 6,4 млн)
# 

# **Топ-10 городов**
# 
# Больше всего объявлений опубликовано в следующих городах и поселках:
# * Санкт-Петербург           
# * Пушкин                    
# * деревня Кудрово            
# * поселок Парголово         
# * поселок Мурино            
# * поселок Шушары            
# * Колпино                    
# * Гатчина                    
# * Всеволожск                 
# * Выборг 
# Самая высокая цена за квадратный метр у Санкт-Петербурга: почти 113 тыс.руб. у замыкающего топ Выборга  среднняя цена составляет 58,2 тыс за кв.м.

# Для Санкт-Петербурга имеет значение отдаленность объекта от центра города. **Самые дорогие объекты располагаются в центре** - средняя стоимость 22.5 млн, объекты в радиусе 3 км в среднем стоят 13-22 млн, более отдаленные от центра квартиры стоят дешевле.
